// Copyright (c) 2010 Anders Lingfors
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

void main_vp(
		float4 position : POSITION,

		out float4 oPosition : POSITION,
		out float3 oNormal : TEXCOORD0,
		out float3 oFragmentPosition : TEXCOORD1,

		uniform float4x4 worldViewProj,
		uniform float baseRadius)
{
	oNormal = normalize(position).xyz;
	position.xyz = baseRadius * oNormal;
	oPosition = mul(worldViewProj, position);
	oFragmentPosition = position.xyz;
}

void main_fp(
	float3 normal : TEXCOORD0,
	float3 fragmentPosition : TEXCOORD1,
	
	out float4 oColor : COLOR,
	
	uniform float3 globalAmbient,
	uniform float3 lightColor,
	uniform float3 lightPosition,
	uniform float3 eyePosition,
	uniform float time,
	uniform float3 Ka,
	uniform float3 Kd,
	uniform float3 Ks,
	uniform float shininess)
{
	float3 N = normalize(normal);
	float3 L = normalize(lightPosition); // Direction to light source
	float NdotL = dot(N, L);
	float3 R = normalize(2 * N * NdotL - L); // Light reflection direction
	float3 V = normalize(eyePosition-fragmentPosition); // Direction from lit surface to eye
	float RdotV = dot(R, V);
	oColor.rgb = (Ka * globalAmbient + Kd*lightColor * max(NdotL, 0.0)) * float3(0.0, 0.25, 0.25) +
		Ks * lightColor * pow(max(RdotV, 0.0), shininess);
	oColor.a = 1.0;
}