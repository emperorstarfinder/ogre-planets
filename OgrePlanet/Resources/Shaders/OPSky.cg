// Copyright (c) 2010 Anders Lingfors
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

void main_vp(float4 position : POSITION,
	float3 normal : NORMAL,

	out float4 oPosition : POSITION,
	out float3 oFragmentPosition : TEXCOORD0,
	out float3 oNormal : TEXCOORD1,
	
	uniform float4x4 worldViewProj)
{
	oNormal = normal;
	oFragmentPosition = position.xyz;
	oPosition = mul(worldViewProj, position);
	
}

void main_fp(float3 fragmentPosition : TEXCOORD0,
	float3 normal : TEXCOORD1,

	out float4 oColor : COLOR,

	uniform float4 lightPosition,
	uniform float4 eyePosition)
{
	float4 sunColor = float4(1.0, 1.0, 1.0, 1.0);
	float4 lightSky = float4(135.0/255.0, 206.0/255.0, 250.0/255.0, 1.0);
	float4 deepSky = float4(0.0, 191.0/255.0, 250.0/255.0, 1.0);
	float4 redSky = float4(1.0, 0.0, 0.0, 1.0);
	float4 nightSky = float4(0.0, 0.0, 0.0, 1.0);
	
	float3 L = normalize(lightPosition.xyz);
	float3 N = normalize(normal);
	float3 eyeToFragVec = normalize(fragmentPosition - eyePosition.xyz);
	
	float FdotL = max(dot(eyeToFragVec, L), 0.0);
	float FdotLpow50 = pow(FdotL, 50);
	
	float LdotP = max(dot(L, normalize(eyePosition.xyz)), 0.0);
	float LdotP2 = (max(dot(L, normalize(eyePosition.xyz)), -0.5) + 0.5) / 1.5;
	float LdotPpow50 = pow(LdotP, 50);
	
	float4 lightColor = lerp(redSky, lightSky, LdotP);
	float4 darkColor = lerp(nightSky, deepSky, LdotP2);
	float4 color = lerp(darkColor, lightColor, lerp(FdotL, FdotLpow50, 1-LdotPpow50));
	oColor = lerp(color, sunColor, FdotLpow50);
}